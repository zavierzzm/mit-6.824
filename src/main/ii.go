package main

import (
	"bufio"
	"os"
	"sort"
	"strings"
)
import "fmt"
import "mapreduce"

func isAlpha(c byte) bool {
	return ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')
}

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// TODO: you should complete this to do the inverted index challenge
	sMap := make(map[string]bool)
	reader := strings.NewReader(value)
	br := bufio.NewReader(reader)
	bytes := []byte{}
	for {
		c, err := br.ReadByte()
		if err == nil {
			if isAlpha(c) {
				bytes = append(bytes, c)
			} else if len(bytes) > 0 {
				sMap[string(bytes)] = true
				bytes = bytes[:0]
			}
		} else {
			break
		}
	}
	// bs := bufio.NewScanner(reader)
	// bs.Split(bufio.ScanWords)
	// for bs.Scan() {
	// 	sMap[bs.Text()] = true
	// }
	var kv mapreduce.KeyValue
	kv.Value = document
	for k := range sMap {
		kv.Key = k
		res = append(res, kv)
	}
	return
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// TODO: you should complete this to do the inverted index challenge
	length := len(values)
	sort.Strings(values)
	documents := strings.Join(values, ",")
	res := fmt.Sprintf("%d %s", length, documents)
	return res
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
